---
import Layout from "../components/Layout.astro";
import Header from "../components/Header.astro";
import Subheader from "../components/Subheader.astro";
import LeftLayout from "../components/LeftLayout.astro";
import RightLayout from "../components/RightLayout.astro";
import Card from "../components/Card.astro";
import SocialLink from "../components/SocialLink.astro";
import LinkButton from "../components/LinkButton.astro";
import DropdownButton from "../components/DropdownButton.astro";
import DropdownItem from "../components/DropdownItem.astro";
import Tooltip from "../components/Tooltip.astro";
import Content from "../components/Content.astro";
import TooltipContent from "../components/TooltipContent.astro";
import Marquee from "../components/Marquee.astro";
import InterestsSection from "../components/InterestsSection.astro";

interface Frontmatter {
  frontmatter: {
    title: string;
    description: string;
    published: string;
    id: string;
    outdated: boolean;
    lastupdated: string;
    tags: string[];
  };
}

// Fetch recent blog posts
const posts = (await Astro.glob<Frontmatter>("./blog/*.{md,mdx}")).sort(
  (a, b) =>
    new Date(b.frontmatter.published).valueOf() -
    new Date(a.frontmatter.published).valueOf()
);
const recentPost = posts[0]; // Get the most recent post

// okay to get the pronouns we use the pronouns.page api
const PROFILE_NAME = "natia";
let pronounParts: { value: string }[] = [];

const PRONOUNS_CACHE_KEY = "pronounsData";
const PERSONAL_DATA_CACHE_KEY = "personalData";
const isDev = import.meta.env.DEV;

// Use a type assertion to avoid TS error about globalThis property
if (isDev && (globalThis as any)[PRONOUNS_CACHE_KEY]) {
  pronounParts = (globalThis as any)[PRONOUNS_CACHE_KEY];
} else {
  const pronouns = await fetch(
    `https://en.pronouns.page/api/profile/get/${PROFILE_NAME}?version=2`
  );
  const pronounsData = await pronouns.json();
  pronounParts = pronounsData.profiles.en.pronouns;
  if (isDev) {
    (globalThis as any)[PRONOUNS_CACHE_KEY] = pronounParts;
  }
}

// Fetch personal data (interests, DNI, playlist) from Google Apps Script
let personalData: {
  interests: Record<string, string[]>;
  dni: Record<string, string[]>;
  playlist: string[];
} = {
  interests: {},
  dni: {},
  playlist: [],
};

// Helper to fetch and cache personal data with cache invalidation (1 minute)
async function getPersonalDataWithCache() {
  const CACHE_KEY = PERSONAL_DATA_CACHE_KEY;
  const CACHE_DURATION = 30 * 60 * 1000; // 30 minutes in ms

  if (isDev && (globalThis as any)[CACHE_KEY]) {
    const cached = (globalThis as any)[CACHE_KEY];
    const lastCacheTime = cached.lastCacheTime;
    if (lastCacheTime && Date.now() - lastCacheTime < CACHE_DURATION) {
      // Cache is valid
      return cached.data;
    }
  }

  try {
    const response = await fetch(
      "https://script.google.com/macros/s/AKfycby7L6cv7btNQzqxSxWfO-whVreNMRC5qTpvOF3Lz7J0EbOgoEvJxhKfaCJWYrxePwBtTw/exec"
    );
    const data = await response.json();
    if (isDev) {
      (globalThis as any)[CACHE_KEY] = {
        data,
        lastCacheTime: Date.now(),
      };
    }
    return data;
  } catch (error) {
    console.warn("Failed to fetch personal data, using fallback:", error);
    // Fallback data in case API fails
    return {
      interests: {
        programming: ["coding"],
        "arch linux": [],
        nixos: [],
        miku: ["hatsune miku"],
        teto: ["teto pear", "kasane teto"],
        signalis: [],
        jamiep: [],
        "specifically jamiep teto songs": [],
        "will stetson": [],
        "flavor foley": [],
        "geometry dash": ["gd"],
        minecraft: ["mc"],
        "cursor (code editor)": ["ai"],
        "btd 6": ["bloons td 6"],
        ado: [],
        vtubers: [],
        anime: [],
        piano: [],
        "bringus studios": ["bringus"],
        "undertale/deltarune": ["deltarune"],
        "osu! (kinda)": [],
        "honkai star rail": ["hsr"],
        portal: [],
        "trans stuff": ["trans"],
      },
      dni: {
        transphobes: ["transphobic"],
        homophobes: ["homophobic"],
        racists: ["racism"],
        nazis: ["fascists"],
        terfs: ["terf"],
        pedophiles: ["predators"],
        ableists: ["ableism"],
        zionists: ["zionist"],
        misogynists: ["misogyny"],
        "crypto/nft bros": ["cryptocurrency", "nft"],
        "ai art supporters": ["ai art"],
        "harassment supporters": ["harassment"],
        doxxers: ["doxxing"],
      },
      playlist: ["yjBuru8lHLs", "sqK-jh4TDXo", "EuJ6UR_pD5s"],
    };
  }
}

personalData = await getPersonalDataWithCache();

// Convert the API format to the format expected by the components
function convertToComponentFormat(
  data: Record<string, string[]>
): (string | string[])[] {
  return Object.entries(data).map(([key, values]) => {
    if (values.length === 0) {
      return key;
    } else {
      return [key, ...values];
    }
  });
}

const interests: (string | string[])[] = convertToComponentFormat(
  personalData.interests
);
const dniItems: (string | string[])[] = convertToComponentFormat(
  personalData.dni
);
const playlist = personalData.playlist;
const webButtons = [
  "https://y2k.neocities.org/buttons/trans.png",
  "https://y2k.neocities.org/buttons/site_best_viewed_with_monitor.gif",
  "https://y2k.neocities.org/buttons/263gggk.gif",
  "https://88by31.neocities.org/pride/trn.png",
  "https://88by31.neocities.org/awareness/eattherich.gif",
  "https://88by31.neocities.org/games/emulate.gif",
  "https://88by31.neocities.org/games/minecraft.png",
  "https://88by31.neocities.org/games/perfectclear.gif",
  "https://88by31.neocities.org/music/vocaloid.png",
  "https://88by31.neocities.org/music/miku.gif",
  "https://88by31.neocities.org/music/miku2.gif",
  "https://88by31.neocities.org/music/funny.gif",
  "https://88by31.neocities.org/web/html_learn_it_today.gif",
  "https://88by31.neocities.org/web/fuck-nfts.gif",
  "https://88by31.neocities.org/web/ih8squarespace.png",
  "https://88by31.neocities.org/web/macmade2.gif",
];
---

<Layout title="Homepage @ Nat3z" description="Homepage for nat3z.github.io">
  <script is:inline>
    // Load YouTube API
    const tag = document.createElement("script");
    tag.src = "https://www.youtube.com/iframe_api";
    const firstScriptTag = document.getElementsByTagName("script")[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  </script>

  <div class="flex flex-col items-center justify-center min-h-screen">
    <div
      class="flex flex-col items-center justify-center w-11/12 md:w-10/12 lg:w-8/12"
    >
      <Header title="Nat3z" />
      <main class="w-full">
        <div class="flex flex-col items-start justify-start pt-4">
          <div
            class="flex flex-col lg:flex-row gap-4 w-full items-start justify-start flex-1 min-h-0"
            style="min-height:0;"
          >
            <LeftLayout
              class="flex flex-col items-center justify-center gap-2 w-full lg:max-w-80 min-h-0 h-full"
              style="min-height:0;"
            >
              <Card bgColor="bg-gray-100" className="relative overflow-hidden">
                <!-- Background gradient and pattern -->
                <div
                  class="absolute inset-0 bg-gradient-to-br from-teal via-teal to-dark-teal"
                >
                </div>
                <div class="absolute inset-0 opacity-10">
                  <div
                    class="absolute top-0 left-0 w-32 h-32 bg-white rounded-full -translate-x-16 -translate-y-16"
                  >
                  </div>
                  <div
                    class="absolute bottom-0 right-0 w-24 h-24 bg-white rounded-full translate-x-12 translate-y-12"
                  >
                  </div>
                  <div
                    class="absolute top-1/2 right-1/4 w-16 h-16 bg-white rounded-full"
                  >
                  </div>
                </div>

                <!-- Content -->
                <div class="relative z-0 text-center">
                  <h1 class="font-analogue text-center text-4xl text-white">
                    Nat3z
                  </h1>
                  <p class="font-analogue text-center text-lg text-white/95">
                    I'm a full-stack engineer and designer.
                  </p>
                  <Tooltip triggerMode="hover" offset={{ x: 0, y: 10 }}>
                    <Content slot="content">
                      <p
                        class="font-analogue text-center text-sm text-white/90 cursor-help"
                      >
                        {
                          pronounParts
                            .slice(0, 2)
                            .map((pronoun: { value: string }) =>
                              pronoun.value.split("/")
                            )
                            .flat()
                            .filter((_, i) => i % 2 === 0)
                            .join("/")
                        }
                      </p>
                    </Content>
                    <TooltipContent slot="tooltip">
                      yes i am very trans
                    </TooltipContent>
                  </Tooltip>
                </div>
              </Card>
              <Card bgColor="bg-gray-100">
                <p class="font-analogue text-center text-lg">Socials</p>
                <div class="flex flex-row gap-2 items-center justify-center">
                  <SocialLink
                    href="https://github.com/nat3z"
                    icon="/github.png"
                    name="github"
                  />

                  <SocialLink
                    href={`https://en.pronouns.page/@${PROFILE_NAME}`}
                    icon="/pronouns.png"
                    name="pronouns.page"
                  />

                  <SocialLink
                    href="https://youtube.com/@nat3zdev"
                    icon="/youtube.svg"
                    name="youtube"
                  />

                  <SocialLink
                    href="https://x.com/nat3zdev"
                    icon="/twitter.svg"
                    name="twitter"
                  />
                </div>
              </Card>
              <Card bgColor="bg-gray-100">
                <InterestsSection
                  title="Interests!"
                  items={interests}
                  searchPlaceholder="Search interests..."
                  searchTooltip="see if our interests match"
                  id="interests"
                />
              </Card>

              <Card bgColor="bg-gray-100">
                <InterestsSection
                  title="DNI (Do Not Interact)"
                  items={dniItems}
                  searchPlaceholder="Search DNI list..."
                  searchTooltip="check if you're on the dni list"
                  id="dni"
                />
              </Card>
              <Card
                bgColor="bg-gray-100 flex flex-col items-center justify-center gap-2"
              >
                <Marquee
                  text="Loading Music Player... Please wait..."
                  speed={15}
                  className="font-analogue text-lg font-bold text-gray-900 w-full text-center"
                />
                <div class="w-full">
                  <progress
                    id="musicProgress"
                    class="w-full accent-teal bg-light-gray h-3 cursor-pointer"
                    value={0}
                    max={100}></progress>
                </div>

                <div class="flex flex-row gap-2 items-center justify-center">
                  <button
                    id="prevBtn"
                    class="cursor-pointer hover:opacity-70 transition-opacity"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      height="24"
                      viewBox="0 0 24 24"
                      width="24"
                      ><path d="M0 0h24v24H0V0z" fill="none"></path><path
                        d="M6 6h2v12H6V6zm3.5 6l8.5 6V6l-8.5 6z"></path></svg
                    >
                  </button>
                  <button
                    id="playPauseBtn"
                    class="cursor-pointer hover:opacity-70 transition-opacity"
                  >
                    <svg
                      id="playIcon"
                      xmlns="http://www.w3.org/2000/svg"
                      height="24"
                      viewBox="0 0 24 24"
                      width="24"
                      ><path d="M0 0h24v24H0V0z" fill="none"></path><path
                        d="M8 5v14l11-7L8 5z"></path></svg
                    >
                    <svg
                      id="pauseIcon"
                      class="hidden"
                      xmlns="http://www.w3.org/2000/svg"
                      height="24"
                      viewBox="0 0 24 24"
                      width="24"
                      ><path d="M0 0h24v24H0V0z" fill="none"></path><path
                        d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"></path></svg
                    >
                  </button>
                  <button
                    id="nextBtn"
                    class="cursor-pointer hover:opacity-70 transition-opacity"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      height="24"
                      viewBox="0 0 24 24"
                      width="24"
                      ><path d="M0 0h24v24H0V0z" fill="none"></path><path
                        d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"></path></svg
                    >
                  </button>
                </div>
                <!-- Invisible YouTube player -->
                <div id="youtubePlayer" style="display: none"></div>
              </Card>
            </LeftLayout>
            <RightLayout class="flex-1 min-h-0 h-full flex flex-col">
              <Card bgColor="bg-gray-100">
                <p class="font-analogue text-left text-lg w-full">
                  hey there! i'm nat3z, a full-stack engineer and designer
                  (whatever that means).
                </p>
                <span
                  class="relative flex w-full flex-wrap items-center justify-center gap-x-8 gap-y-12 py-4 2xl:max-h-24 md:justify-start"
                >
                  <div
                    class="flex flex-col items-center gap-2 text-center sm:relative sm:flex-row sm:w-36 sm:justify-center"
                  >
                    <Tooltip triggerMode="click" offset={{ x: 15, y: 0 }}>
                      <Content slot="content">
                        <img
                          src="/boccher_bruv.webp"
                          alt="Me"
                          class="w-20 cursor-pointer sm:relative sm:-left-5"
                        />
                      </Content>
                      <TooltipContent slot="tooltip">
                        this is literally me (real)
                      </TooltipContent>
                    </Tooltip>
                    <p
                      class="font-analogue w-max sm:absolute sm:left-24 sm:top-5"
                    >
                      {"<- me fr"}
                    </p>
                  </div>
                  <div
                    class="flex flex-col items-center gap-2 text-center relative -top-2 sm:flex-row sm:w-36"
                  >
                    <img src="/miku.png" alt="miku" class="w-16" />
                    <p
                      class="font-analogue w-max sm:absolute sm:left-16 sm:top-5"
                    >
                      {"<- thats just miku"}
                    </p>
                  </div>
                  <div
                    class="flex flex-col items-center gap-2 text-center relative -top-4 sm:flex-row sm:pl-10 sm:w-36"
                  >
                    <img
                      src="/kasane-teto.gif"
                      alt="teto pear"
                      class="w-12 sm:relative sm:top-2"
                    />
                    <p
                      class="font-analogue w-max sm:absolute sm:left-24 sm:top-5"
                    >
                      {"<- teto pear"}
                    </p>
                  </div>
                </span>
                <p class="font-analogue text-left text-lg w-full">
                  you may know me as that one person who makes autism-coded
                  videos on SIGNALIS, the person helping you track time
                  throughout the day, the developer of <a
                    href="https://ogi.nat3z.com"
                    target="_blank"
                    class="underline text-teal hover:text-dark-teal"
                    >OpenGameInstaller</a
                  >, or literally anything else.
                </p>
                <p class="font-analogue text-left text-lg w-full">
                  the fact of the matter is that you somehow ended up here, and
                  i'm glad you came along for the ride :)
                </p>
              </Card>
              <Card
                bgColor="bg-gray-100"
                className="h-full flex-1 flex flex-col"
              >
                <p class="font-analogue text-left text-lg w-full">
                  Recent Blog Post
                </p>
                {
                  recentPost ? (
                    <a
                      href={`/blog/${recentPost.frontmatter.id}`}
                      class="block w-full transition-all hover:shadow-md group mt-2"
                    >
                      <div class="bg-white hover:bg-gray-50 transition-colors duration-200 p-4 border-l-4 border-transparent hover:border-teal relative">
                        {recentPost.frontmatter.outdated && (
                          <Tooltip
                            triggerMode="hover"
                            position="cursor"
                            offset={{ x: 0, y: 10 }}
                            tooltipClass="w-60"
                          >
                            <Content slot="content">
                              <div class="absolute top-3 right-3 text-red-500">
                                <svg
                                  class="w-4 h-4"
                                  fill="currentColor"
                                  viewBox="0 0 20 20"
                                >
                                  <path
                                    fill-rule="evenodd"
                                    d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                                    clip-rule="evenodd"
                                  />
                                </svg>
                              </div>
                            </Content>
                            <TooltipContent slot="tooltip">
                              This post might be outdated
                            </TooltipContent>
                          </Tooltip>
                        )}

                        <div class="flex flex-col gap-2">
                          <div class="flex-1 min-w-0">
                            <h3 class="font-analogue text-base font-bold text-gray-900 group-hover:text-teal transition-colors line-clamp-1">
                              {recentPost.frontmatter.title}
                            </h3>
                            <p class="font-analogue text-sm text-gray-600 line-clamp-2 mt-1">
                              {recentPost.frontmatter.description}
                            </p>
                          </div>

                          <div class="flex flex-col gap-2">
                            <p class="font-analogue text-xs text-gray-500">
                              {new Date(
                                recentPost.frontmatter.published
                              ).toLocaleDateString("en-US", {
                                month: "short",
                                day: "numeric",
                                year: "numeric",
                              })}
                            </p>

                            {recentPost.frontmatter.tags &&
                              recentPost.frontmatter.tags.length > 0 && (
                                <div class="flex flex-wrap gap-1">
                                  {recentPost.frontmatter.tags
                                    .slice(0, 3)
                                    .map((tag) => (
                                      <span class="font-analogue text-xs bg-teal text-white px-2 py-1">
                                        #{tag}
                                      </span>
                                    ))}
                                  {recentPost.frontmatter.tags.length > 3 && (
                                    <span class="font-analogue text-xs text-gray-500">
                                      +{recentPost.frontmatter.tags.length - 3}
                                    </span>
                                  )}
                                </div>
                              )}
                          </div>
                        </div>
                      </div>
                    </a>
                  ) : (
                    <div class="mt-2 p-4 bg-white">
                      <p class="font-analogue text-center text-sm text-gray-600">
                        No blog posts yet... but they're coming soon! 👀
                      </p>
                    </div>
                  )
                }
                <div class="mt-4">
                  <a
                    href="/blog"
                    class="font-analogue text-sm text-teal hover:text-dark-teal transition-colors underline"
                  >
                    View all blog posts →
                  </a>
                </div>
              </Card>
              <Card bgColor="bg-gray-100">
                <Marquee
                  images={webButtons}
                  speed={25}
                  imageAlt="Web button"
                  className="w-full"
                />
              </Card>
              <Card bgColor="bg-gray-100">
                <p class="font-analogue text-center text-lg w-full">
                  (c) {new Date().getFullYear()} Nat3z, hosted on Vercel with Astro.
                  Source available on
                  <a
                    href="https://github.com/nat3z/nat3z.github.io"
                    class="underline text-teal hover:text-dark-teal">GitHub</a
                  >. Read the <a
                    href="/license"
                    class="underline text-teal hover:text-dark-teal">license</a
                  >.
                </p>
              </Card>
            </RightLayout>
          </div>
        </div>
      </main>
    </div>
  </div>
</Layout>

<!-- YouTube IFrame API -->
<script is:inline define:vars={{ currentPlaylistBase: playlist }}>
  // YouTube Music Player
  let youtubePlayer;

  // Shuffle the playlist using Fisher-Yates algorithm
  function shufflePlaylist(playlist) {
    for (let i = playlist.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [playlist[i], playlist[j]] = [playlist[j], playlist[i]];
    }
    return playlist;
  }

  let currentTrackIndex = 0;
  let isPlaying = false;
  let progressUpdateInterval;
  /**
   * @type {string[]}
   */
  let currentPlaylist = shufflePlaylist(currentPlaylistBase);

  // This function is called automatically by YouTube API
  window.onYouTubeIframeAPIReady = function () {
    youtubePlayer = new YT.Player("youtubePlayer", {
      height: "0",
      width: "0",
      videoId: currentPlaylist[currentTrackIndex],
      playerVars: {
        autoplay: 0,
        controls: 0,
        disablekb: 1,
        enablejsapi: 1,
        fs: 0,
        iv_load_policy: 3,
        modestbranding: 1,
        rel: 0,
        showinfo: 0,
      },
      events: {
        onReady: onPlayerReady,
        onStateChange: onPlayerStateChange,
      },
    });
  };

  function onPlayerReady(event) {
    // Player is ready, setup controls
    setupMusicControls();
  }

  function onPlayerStateChange(event) {
    if (event.data === YT.PlayerState.PLAYING) {
      isPlaying = true;
      updatePlayPauseButton();
      startProgressUpdate();
    } else if (event.data === YT.PlayerState.PAUSED) {
      isPlaying = false;
      updatePlayPauseButton();
      stopProgressUpdate();
    } else if (event.data === YT.PlayerState.ENDED) {
      nextTrack();
    }
  }

  function setupMusicControls() {
    const playPauseBtn = document.getElementById("playPauseBtn");
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");
    const progressBar = document.getElementById("musicProgress");

    if (playPauseBtn) {
      playPauseBtn.addEventListener("click", togglePlayPause);
    }

    if (prevBtn) {
      prevBtn.addEventListener("click", prevTrack);
    }

    if (nextBtn) {
      nextBtn.addEventListener("click", nextTrack);
    }

    if (progressBar) {
      progressBar.addEventListener("click", seekTo);
    }

    // Initialize display
    updateCurrentSong();
  }

  function togglePlayPause() {
    if (!youtubePlayer) return;

    if (isPlaying) {
      youtubePlayer.pauseVideo();
    } else {
      youtubePlayer.playVideo();
    }
  }

  function updatePlayPauseButton() {
    const playIcon = document.getElementById("playIcon");
    const pauseIcon = document.getElementById("pauseIcon");

    if (isPlaying) {
      playIcon && playIcon.classList.add("hidden");
      pauseIcon && pauseIcon.classList.remove("hidden");
    } else {
      playIcon && playIcon.classList.remove("hidden");
      pauseIcon && pauseIcon.classList.add("hidden");
    }
  }

  function prevTrack() {
    currentTrackIndex =
      (currentTrackIndex - 1 + currentPlaylist.length) % currentPlaylist.length;
    loadCurrentTrack();
  }

  function nextTrack() {
    currentTrackIndex = (currentTrackIndex + 1) % currentPlaylist.length;
    loadCurrentTrack();
  }

  function loadCurrentTrack() {
    if (!youtubePlayer) return;

    youtubePlayer.loadVideoById(currentPlaylist[currentTrackIndex]);
    updateCurrentSong();
  }

  async function updateCurrentSong() {
    // Find all marquee text elements and update them
    const marqueeElements = document.querySelectorAll(".marquee-text");
    // Get the current song from the YouTube player, if available
    let currentSong = null;
    if (youtubePlayer && typeof youtubePlayer.getVideoData === "function") {
      // wait until video player is ready
      await new Promise((resolve) => {
        const checkReady = () => {
          if (
            youtubePlayer.getVideoData() &&
            youtubePlayer.getVideoData().title
          ) {
            resolve();
          } else {
            setTimeout(checkReady, 100);
          }
        };
        checkReady();
      });
      const videoData = youtubePlayer.getVideoData();
      currentSong = (
        videoData && videoData.title ? videoData.title : null
      ).replace(/^Pearto$/, "Teto Pear - Kasane Teto");
      console.log(currentSong);
      marqueeElements.forEach((element) => {
        element.textContent = currentSong;
      });
    }
  }

  function seekTo(event) {
    if (!youtubePlayer) return;

    const progressBar = event.target;
    const rect = progressBar.getBoundingClientRect();
    const clickX = event.clientX - rect.left;
    const percentage = clickX / rect.width;
    const duration = youtubePlayer.getDuration();

    if (duration > 0) {
      const seekTime = duration * percentage;
      youtubePlayer.seekTo(seekTime, true);
    }
  }

  function updateProgress() {
    if (!youtubePlayer) return;

    const currentTime = youtubePlayer.getCurrentTime();
    const duration = youtubePlayer.getDuration();
    const progressBar = document.getElementById("musicProgress");

    if (duration > 0 && progressBar) {
      const percentage = (currentTime / duration) * 100;
      progressBar.value = percentage;
    }
  }

  function startProgressUpdate() {
    stopProgressUpdate(); // Clear any existing interval
    progressUpdateInterval = setInterval(updateProgress, 1000);
  }

  function stopProgressUpdate() {
    if (progressUpdateInterval) {
      clearInterval(progressUpdateInterval);
      progressUpdateInterval = null;
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", function () {
    // If YouTube API is already loaded, initialize
    if (window.YT && window.YT.Player) {
      window.onYouTubeIframeAPIReady();
    }
  });
</script>

<style>
  #musicProgress {
    --progress-bar-color: var(--color-teal);
    --progress-bg-color: var(--color-gray-400);
    &::-moz-progress-bar {
      background: var(--progress-bar-color);
    }
    &::-webkit-progress-bar {
      background: var(--progress-bg-color);
    }
  }
</style>
